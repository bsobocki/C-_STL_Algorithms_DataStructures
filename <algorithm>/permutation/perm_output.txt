'std::next_permutation' returns true, if the next determined permutation  is lexicographically higher and false, if the next permutation is lexicographically lower or equal.
 

---

next permutations of collection = { 2, 1, 3, 5}
printing until next_permutation returns true (lexicographically ascending order): 

{ 2, 1, 3, 5}
{ 2, 1, 5, 3}
{ 2, 3, 1, 5}
{ 2, 3, 5, 1}
{ 2, 5, 1, 3}
{ 2, 5, 3, 1}
{ 3, 1, 2, 5}
{ 3, 1, 5, 2}
{ 3, 2, 1, 5}
{ 3, 2, 5, 1}
{ 3, 5, 1, 2}
{ 3, 5, 2, 1}
{ 5, 1, 2, 3}
{ 5, 1, 3, 2}
{ 5, 2, 1, 3}
{ 5, 2, 3, 1}
{ 5, 3, 1, 2}
{ 5, 3, 2, 1}
 There are 18 permutations.  The next permutation (with returned value = false): { 1, 2, 3, 5}


---

next permutations of collection = { 1, 2, 3, 5}
printing until next_permutation returns true (lexicographically ascending order): 

{ 1, 2, 3, 5}
{ 1, 2, 5, 3}
{ 1, 3, 2, 5}
{ 1, 3, 5, 2}
{ 1, 5, 2, 3}
{ 1, 5, 3, 2}
{ 2, 1, 3, 5}
{ 2, 1, 5, 3}
{ 2, 3, 1, 5}
{ 2, 3, 5, 1}
{ 2, 5, 1, 3}
{ 2, 5, 3, 1}
{ 3, 1, 2, 5}
{ 3, 1, 5, 2}
{ 3, 2, 1, 5}
{ 3, 2, 5, 1}
{ 3, 5, 1, 2}
{ 3, 5, 2, 1}
{ 5, 1, 2, 3}
{ 5, 1, 3, 2}
{ 5, 2, 1, 3}
{ 5, 2, 3, 1}
{ 5, 3, 1, 2}
{ 5, 3, 2, 1}
 There are 24 permutations.  The next permutation (with returned value = false): { 1, 2, 3, 5}
